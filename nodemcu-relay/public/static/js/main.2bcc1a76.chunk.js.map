{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["LIGHTS","name","id","LightSwitch","light","state","Container","fixed","Switch","color","checked","onClick","newState","console","log","superagent","post","send","then","Boolean","window","location","hostname","match","ReactDOM","render","React","useState","switchStates","setSwitchStates","useInterval","get","switches","body","Array","isArray","map","s","value","Box","AppBar","position","Toolbar","Typography","Paper","Button","variant","Table","TableBody","TableRow","slice","TableCell","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bcc1a76.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  AppBar,\n  Box,\n  Button,\n  Container,\n  Grid,\n  Paper,\n  Switch,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport {useInterval} from \"react-use\";\nimport superagent from \"superagent\";\n\nconst LIGHTS = [\n  {\n    name: \"Computer Room\",\n    id: \"d41e29f1-2637-4374-8d24-2871d6047e20\"\n  },\n  null,\n  null,\n  {\n    name: \"Cat Room\",\n    id: \"b87d4981-0a2c-4a1a-98df-f3e415bcf7cb\"\n  },\n  {\n    name: \"Downstairs Hall Light 1\",\n    id: \"7df74b1c-b5c0-42bd-b4d4-289c2d445027\"\n  },\n  {\n    name: \"Downstairs Hall Light 2\",\n    id: \"41d80e06-69e2-41aa-a72d-8416edfc0f13\"\n  },\n  null,\n  null,\n  {\n    name: \"Dan's Lamp\",\n    id: \"b4d43e94-140e-4aee-bd6e-c0990b1bb0c5\"\n  },\n  null,\n  {\n    name: \"Living Room Lamp 2\",\n    id: \"c50d7ecb-9d79-4ca0-8b66-ee846883fdff\"\n  },\n  {\n    name: \"Living Room Light\",\n    id: \"00dae423-8033-4227-81dc-1781d710b557\"\n  },\n  null,\n  {\n    name: \"Bedroom Light\",\n    id: \"77975a0d-f358-4c39-96d6-ae70c768d204\"\n  },\n  null,\n  {\n    name: \"Living Room Lamp\",\n    id: \"86ed625c-11ea-4997-b7d2-e0583866000b\"\n  }\n]\n\nconst LightSwitch = ({light, state}) => {\n  const {name, id} = light;\n\n  const toggle = () => {\n    const newState = state === \"on\" ? \"off\" : \"on\";\n    console.log(\"Turning \" + name + \" \" + newState);\n    superagent\n      .post(`/api/switches/set`)\n      .send({\n        id,\n        state: newState\n      })\n      .then(() => undefined);\n  };\n\n  return <Container fixed>\n    {name}\n    <Switch color=\"primary\" checked={state === \"on\"} onClick={toggle} />\n  </Container>;\n}\n\nexport default () => {\n  const [switchStates, setSwitchStates] = React.useState({});\n\n  useInterval(() => {\n    superagent.get(\"/api/switches/list\")\n      .then(({body: switches}) => {\n        if (!switches || !Array.isArray(switches)) return;\n\n        const newState = {};\n        switches.map(s => {\n          newState[s.id] = s.value;\n        });\n\n        setSwitchStates(newState);\n      });\n  }, 1000);\n\n  const turnOffAllLights = () => {\n    console.log('Turning all lights off');\n    for (let id in switchStates) {\n      if (switchStates[id] === \"on\") {\n        console.log(\"Turning \" + id + \" off.\");\n        superagent\n          .post(\"/api/switches/set\")\n          .send({\n            id,\n            state: \"off\"\n          })\n          .then(() => undefined);\n      }\n    }\n  };\n\n  return <Box>\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography>\n          The Weird Blue House\n        </Typography>\n      </Toolbar>\n    </AppBar>\n    <Container>\n      <Paper>\n        <Button variant=\"contained\" color=\"primary\" onClick={turnOffAllLights} >\n          Turn off all lights\n        </Button>\n      </Paper>\n      <Paper>\n        <Table>\n          <TableBody>\n            <TableRow>\n              {\n                LIGHTS.slice(0, 4).map(\n                  light => <TableCell>\n                    {light && <LightSwitch light={light} state={switchStates[light.id]} />}\n                  </TableCell>\n                )\n              }\n            </TableRow>\n            <TableRow>\n              {\n                LIGHTS.slice(4, 8).map(\n                  light => <TableCell>\n                    {light && <LightSwitch light={light} state={switchStates[light.id]} />}\n                  </TableCell>\n                )\n              }\n            </TableRow>\n            <TableRow>\n              {\n                LIGHTS.slice(8, 12).map(\n                  light => <TableCell>\n                    {light && <LightSwitch light={light} state={switchStates[light.id]} />}\n                  </TableCell>\n                )\n              }\n            </TableRow>\n            <TableRow>\n              {\n                LIGHTS.slice(12, 16).map(\n                  light => <TableCell>\n                    {light && <LightSwitch light={light} state={switchStates[light.id]} />}\n                  </TableCell>\n                )\n              }\n            </TableRow>\n          </TableBody>\n        </Table>\n      </Paper>\n    </Container>\n  </Box>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}